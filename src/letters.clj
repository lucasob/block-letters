(ns letters
  (:require [clojure.string :as string]))

(def ^:const width 5)

(def a [[1 1 1 1 1]
        [1 0 0 0 1]
        [1 1 1 1 1]
        [1 0 0 0 1]
        [1 0 0 0 1]])

(def b [[1 1 1 1 1]
        [1 0 0 0 1]
        [1 1 1 1 1]
        [1 0 0 0 1]
        [1 1 1 1 1]])

(def c [[1 1 1 1 1]
        [1 0 0 0 0]
        [1 0 0 0 0]
        [1 0 0 0 0]
        [1 1 1 1 1]])

(def d [[1 1 1 1 0]
        [1 0 0 0 1]
        [1 0 0 0 1]
        [1 0 0 0 1]
        [1 1 1 1 0]])

(def e [[1 1 1 1 1]
        [1 0 0 0 0]
        [1 1 1 0 0]
        [1 0 0 0 0]
        [1 1 1 1 1]])

(def f [[1 1 1 1 1]
        [1 0 0 0 0]
        [1 1 1 0 0]
        [1 0 0 0 0]
        [1 0 0 0 0]])

(def g [[1 1 1 1 1]
        [1 0 0 0 0]
        [1 0 0 1 1]
        [1 0 0 0 1]
        [1 1 1 1 1]])

(def h [[1 0 0 0 1]
        [1 0 0 0 1]
        [1 1 1 1 1]
        [1 0 0 0 1]
        [1 0 0 0 1]])

(def i [[1 1 1 1 1]
        [0 0 1 0 0]
        [0 0 1 0 0]
        [0 0 1 0 0]
        [1 1 1 1 1]])

(def j [[0 1 1 1 1]
        [0 0 0 0 1]
        [0 0 0 0 1]
        [0 0 0 0 1]
        [1 1 1 1 0]])

(def k [[1 0 0 1 0]
        [1 0 1 0 0]
        [1 1 0 0 0]
        [1 0 1 0 0]
        [1 0 0 1 0]])

(def l [[1 0 0 0 0]
        [1 0 0 0 0]
        [1 0 0 0 0]
        [1 0 0 0 0]
        [1 1 1 1 1]])

(def m [[1 0 0 0 1]
        [1 1 1 1 1]
        [1 0 1 0 1]
        [1 0 0 0 1]
        [1 0 0 0 1]])

(def n [[1 0 0 0 1]
        [1 1 0 0 1]
        [1 0 1 0 1]
        [1 0 0 1 1]
        [1 0 0 0 1]])

(def o [[1 1 1 1 1]
        [1 0 0 0 1]
        [1 0 0 0 1]
        [1 0 0 0 1]
        [1 1 1 1 1]])

(def p [[1 1 1 1 1]
        [1 0 0 0 1]
        [1 1 1 1 1]
        [1 0 0 0 0]
        [1 0 0 0 0]])

(def q [[0 1 1 1 0]
        [1 0 0 0 1]
        [1 0 1 0 1]
        [1 0 0 1 1]
        [0 1 1 0 1]])

(def r [[1 1 1 1 1]
        [1 0 0 0 1]
        [1 1 1 1 1]
        [1 1 0 0 0]
        [1 0 1 0 0]])

(def s [[1 1 1 1 1]
        [1 0 0 0 0]
        [1 1 1 1 1]
        [0 0 0 0 1]
        [1 1 1 1 1]])

(def t [[1 1 1 1 1]
        [0 0 1 0 0]
        [0 0 1 0 0]
        [0 0 1 0 0]
        [0 0 1 0 0]])

(def u [[1 0 0 0 1]
        [1 0 0 0 1]
        [1 0 0 0 1]
        [1 0 0 0 1]
        [1 1 1 1 1]])

(def v [[1 0 0 0 1]
        [1 0 0 0 1]
        [1 0 0 0 1]
        [0 1 0 1 0]
        [0 0 1 0 0]])

(def w [[1 0 0 0 1]
        [1 0 0 0 1]
        [1 0 1 0 1]
        [1 1 1 1 1]
        [1 0 0 0 1]])

(def x [[1 0 0 0 1]
        [0 1 0 1 0]
        [0 0 1 0 0]
        [0 1 0 1 0]
        [1 0 0 0 1]])

(def y [[1 0 0 0 1]
        [0 1 0 1 0]
        [0 0 1 0 0]
        [0 0 1 0 0]
        [0 0 1 0 0]])

(def z [[1 1 1 1 1]
        [0 0 0 1 0]
        [0 0 1 0 0]
        [0 1 0 0 0]
        [1 1 1 1 1]])

(def ! [[0 0 1 0 0]
        [0 0 1 0 0]
        [0 0 1 0 0]
        [0 0 0 0 0]
        [0 0 1 0 0]])

(def char->block
  {\space
   [0 0 0 0 0
    0 0 0 0 0
    0 0 0 0 0
    0 0 0 0 0
    0 0 0 0 0]

   \.
   [0 0 0 0 0
    0 0 0 0 0
    0 0 0 0 0
    0 0 0 0 0
    1 0 0 0 0]
   
   \0
   [1 1 1 1 1
    1 1 0 0 1
    1 0 1 0 1
    1 0 0 1 1
    1 1 1 1 1]

   \1
   [0 0 1 0 0
    0 1 1 0 0
    0 0 1 0 0
    0 0 1 0 0
    1 1 1 1 1]

   \2
   [1 1 1 1 1
    0 0 0 1 1
    0 0 1 1 0
    1 1 0 0 0
    1 1 1 1 1]

   \3
   [1 1 1 1 1
    0 0 0 0 1
    0 1 1 1 1
    0 0 0 0 1
    1 1 1 1 1]

   \4
   [1 0 0 0 1
    1 0 0 0 1
    1 1 1 1 1
    0 0 0 0 1
    0 0 0 0 1]

   \5
   [1 1 1 1 1
    1 0 0 0 0
    1 1 1 1 1
    0 0 0 0 1
    1 1 1 1 1]

   \6
   [1 1 1 1 1
    1 0 0 0 0
    1 1 1 1 1
    1 0 0 0 1
    1 1 1 1 1]

   \7
   [1 1 1 1 1
    0 0 0 1 0
    0 0 1 0 0
    0 1 0 0 0
    1 0 0 0 0]
   
   \8
   [1 1 1 1 1
    1 0 0 0 1
    1 1 1 1 1
    1 0 0 0 1
    1 1 1 1 1]

   \9
   [1 1 1 1 1
    1 0 0 0 1
    1 1 1 1 1
    0 0 0 0 1
    1 1 1 1 1]})

(defn ->letter [^Character letter]
  (if (contains? char->block letter)
    (partition 5 (get char->block letter))
    (try
      (->> letter (str) (string/lower-case) (symbol) (ns-resolve 'letters) (deref))
      (catch Exception _e nil))))
